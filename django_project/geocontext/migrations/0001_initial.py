# Generated by Django 2.0.4 on 2018-04-21 06:18

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ContextCache',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of Cache Context.', max_length=200)),
                ('source_uri', models.CharField(help_text='Source URI of the Context.', max_length=1000)),
                ('geometry_linestring', django.contrib.gis.db.models.fields.LineStringField(blank=True, dim=3, help_text='The line geometry of the context.', null=True, srid=4326)),
                ('geometry_multi_linestring', django.contrib.gis.db.models.fields.MultiLineStringField(blank=True, dim=3, help_text='The multi line geometry of the context.', null=True, srid=4326)),
                ('geometry_polygon', django.contrib.gis.db.models.fields.PolygonField(blank=True, dim=3, help_text='The polygon geometry of the context.', null=True, srid=4326)),
                ('geometry_multi_polygon', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, dim=3, help_text='The multi polygon geometry of the context.', null=True, srid=4326)),
                ('value', models.CharField(help_text='The value of the context.', max_length=200)),
                ('expired_time', models.DateTimeField(help_text='When the cache expired.')),
            ],
        ),
        migrations.CreateModel(
            name='ContextServiceRegistry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='Key of Context Service.', max_length=200, unique=True)),
                ('display_name', models.CharField(help_text='Display Name of Context Service.', max_length=200)),
                ('description', models.CharField(blank=True, help_text='Description of Context Service.', max_length=1000, null=True)),
                ('url', models.CharField(help_text='URL of Context Service.', max_length=1000)),
                ('user', models.CharField(blank=True, help_text='User name for accessing Context Service.', max_length=200, null=True)),
                ('password', models.CharField(blank=True, help_text='Password for accessing Context Service.', max_length=200, null=True)),
                ('api_key', models.CharField(blank=True, help_text='API key for accessing Context Service.', max_length=200, null=True)),
                ('query_url', models.CharField(blank=True, help_text='Query URL for accessing Context Service.', max_length=1000, null=True)),
                ('query_type', models.CharField(choices=[('WFS', 'WFS'), ('WCS', 'WCS'), ('WMS', 'WMS'), ('REST', 'REST'), ('Wikipedia', 'Wikipedia')], help_text='Query type of the Context Service.', max_length=200)),
                ('result_regex', models.CharField(help_text='Regex to retrieve the desired value.', max_length=200)),
                ('time_to_live', models.IntegerField(blank=True, default=604800, help_text='Time to live of Context Service to be used in caching in seconds unit.', null=True)),
                ('srid', models.IntegerField(blank=True, default=4326, help_text='The Spatial Reference ID of the service registry.', null=True)),
                ('layer_typename', models.CharField(help_text='Layer type name to get the context.', max_length=200)),
                ('service_version', models.CharField(help_text='Version of the service (e.g. WMS 1.1.0, WFS 2.0.0).', max_length=200)),
            ],
        ),
        migrations.AddField(
            model_name='contextcache',
            name='service_registry',
            field=models.ForeignKey(help_text='Service registry where the context comes from', on_delete=django.db.models.deletion.CASCADE, to='geocontext.ContextServiceRegistry'),
        ),
    ]
